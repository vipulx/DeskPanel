esphome:
  name: deskpanel
  friendly_name: deskpanel

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf

# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Deskpanel Fallback Hotspot"
    password: "HRdpdqnZy3FN"

captive_portal:
    
# -------------------
# Outputs
# -------------------
output:
  - platform: gpio
    pin: GPIO15
    id: onboard_led
    
remote_receiver:
  pin: GPIO14
  dump: all
# -------------------
# Lights
# -------------------
light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: WS2812
    pin: GPIO18
    num_leds: 3
    name: "Status Light"
    id: status_light
    restore_mode: ALWAYS_OFF

  - platform: binary
    name: "Onboard LED"
    output: onboard_led
    id: Onboard_status_light
    restore_mode: ALWAYS_OFF

# -------------------
# I2C OLED
# -------------------
i2c:
  sda: 8
  scl: 9
  scan: true
  id: bus_a
  
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: oled
    address: 0x3C
    lambda: |-
      if (id(show_message)) {
        // Temporary message from HA
        it.printf(64, 16, id(font1), TextAlign::CENTER, "%s", id(message_text).c_str());
      } 
      
      else {
        // Page menu system
        if (id(current_page) == 0) {
          // Page 1: Show Time
          it.strftime(64, 19, id(font_big), TextAlign::CENTER, "%I:%M", id(home_time).now());
        } 

        else if (id(current_page) == 1) {
          // Page 2: Show IP
          it.printf(64, 32, id(font1), TextAlign::CENTER, "%s", id(my_ip).state.c_str());
        } 

        else if (id(current_page) == 2) {
        // Page 3: 4 boxes showing HA entity states
        it.rectangle(0, 0, 64, 24);   // Box 1
        it.rectangle(64, 0, 64, 24);  // Box 2
        it.rectangle(0, 24, 64, 24);  // Box 3
        it.rectangle(64, 24, 64, 24); // Box 4

        it.printf(32, 12, id(font_14), TextAlign::CENTER, "Light: %s", id(light_state).state.c_str());
        it.printf(96, 12, id(font_14), TextAlign::CENTER, "Fan: %s", id(fan_state).state.c_str());
        it.printf(32, 36, id(font_14), TextAlign::CENTER, "Plug: %s", id(plug_state).state.c_str());
        it.printf(96, 36, id(font_14), TextAlign::CENTER, "Relay: %s", id(relay_state).state.c_str());
      }} 
# -------------------
# Time & Fonts
# -------------------
time:
  - platform: homeassistant
    id: home_time

font:
  - file: "ARIAL.TTF"
    id: font_14
    size: 14
  - file: "ARIAL.TTF"
    id: font1
    size: 16
  - file: "fonts/digital-7mi.ttf"
    id: font_big
    size: 60


# -------------------
# Rotary Encoder
# -------------------
sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a: GPIO2
    pin_b: GPIO3
    id: rotary_value
    resolution: 2
    on_clockwise:
      then:
        - lambda: |-
            id(current_page)++;
            if (id(current_page) > 2) id(current_page) = 0;
            id(oled).update();
    on_anticlockwise:
      then:
        - lambda: |-
            id(current_page)--;
            if (id(current_page) < 0) id(current_page) = 2;
            id(oled).update();


# -------------------
# WiFi Info (for IP display)
# -------------------
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "ESP IP Address"
      id: my_ip

  - platform: homeassistant
    id: light_state
    entity_id: light.esphome_bedroom_bathroom_light
  - platform: homeassistant
    id: fan_state
    entity_id: fan.esphome_bedroom_bedroom_fan
  - platform: homeassistant
    id: plug_state
    entity_id: light.esphome_bedroom_bedroom_light
  - platform: homeassistant
    id: relay_state
    entity_id: light.esphome_bedroom_bedroom_night_light


 #Custom HA message
  - platform: homeassistant
    id: ha_message
    entity_id: input_text.oled_message
    on_value:
      then:
        - lambda: |-
            id(message_text) = x;
            id(show_message) = true;
        - component.update: oled
        - delay: 5s
        - lambda: |-
            id(show_message) = false;
        - component.update: oled


# -------------------
# Globals
# -------------------
globals:

  - id: message_text
    type: std::string
    restore_value: no
    initial_value: '"Hello Sid"'

  - id: show_message
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: current_page
    type: int
    restore_value: no
    initial_value: '0'
globals:
  - id: display_on
    type: bool
    restore_value: no
    initial_value: "true"

# -------------------
# Scripts
# -------------------
script:
  - id: show_temp_message
    parameters:
      msg: string
    then:
      - lambda: |-
          id(message_text) = msg;
          id(show_message) = true;
          id(display_on) = true;   // wake display
      - component.update: oled
      - script.execute: auto_off_display
      - delay: 5s
      - lambda: |-
          id(show_message) = false;
      - component.update: oled

  - id: auto_off_display
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          id(display_on) = false;
      - component.update: oled


# -------------------
# Push Buttons
# -------------------
binary_sensor:
  # - platform: gpio
  #   pin:  
  #     number: GPIO4
  #     inverted: true
  #     mode: INPUT_PULLUP
  #   name: "IR Button"

  - platform: gpio
    pin:
      number: GPIO7
      inverted: true
      mode: INPUT_PULLUP
    name: "Power Button"
    on_double_click: 
      then:

        - lambda: |-
            id(message_text) = "Switching to TV Mode";
            id(show_message) = true;
        - component.update: oled
        - delay: 5s
        - lambda: |-
            id(show_message) = false;    

        - logger.log: "TV Mode"
        - switch.turn_on: relay_monitor
        - switch.turn_on: server_power_switch
        - delay: 1s
        - switch.turn_off: server_power_switch
        - delay: 3s
        # - switch.turn_off: relay_server (optional)
        - switch.turn_on: relay_alexa
        - switch.turn_on: relay_firetv

    on_press:
      then:
        - lambda: |-
            id(message_text) = "Work Mode";
            id(show_message) = true;
        - component.update: oled
        - delay: 5s
        - lambda: |-
            id(show_message) = false;

        - logger.log: "Work Mode"
        - switch.turn_off: relay_alexa
        - switch.turn_on: relay_monitor
        - switch.turn_on: relay_server
        - delay: 1s
        - switch.turn_on: server_power_switch
        - delay: 1s
        - switch.turn_off: server_power_switch

  - platform: gpio
    pin:
      number: GPIO5
      inverted: true
      mode: INPUT_PULLUP
    name: "RE OK"
    

# -------------------
# Restart & Power Control
# -------------------
button:
  - platform: restart
    id: restart_device
    name: "Restart ESP"

switch:
  - platform: gpio
    pin: GPIO6
    id: server_power_switch
    name: "Server Power Switch"

  - platform: gpio
    pin: GPIO10
    id: relay_server
    name: "Relay - Server"

  - platform: gpio
    pin: GPIO11
    id: relay_monitor
    name: "Relay - Monitor"

  - platform: gpio
    pin: GPIO12
    id: relay_alexa
    name: "Relay - Alexa"

  - platform: gpio
    pin: GPIO13
    id: relay_firetv
    name: "Relay - FireTV"
